<?php

/**
 * This module provides SSO feature via GitHub API integration.
 *
 * @author Gor Martsen <gor@me.com>
 */

define('GITHUB_SSO_SCOPE', 'user:email');


/**
 * Implements hook_menu().
 */
function githubapi_sso_menu() {
  $items = array();

  $items['githubapi/register/sso'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Connect to Github',
    'page callback' => 'githubapi_sso_get_access_token',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function githubapi_sso_user_view($account, $view_mode, $langcode) {
  $githubapi_sso_status = '';
  
  $githubapi_sso = db_select('githubapi_sso_login', 'gsl')
            ->fields('gsl')
            ->condition('uid', $account->uid)
            ->execute()
            ->fetchObject();
  
  if($githubapi_sso){
    $githubapi_sso_status = backdrop_get_form('githubapi_sso_unlink', $githubapi_sso);
  }else{
    $githubapi_sso_status = backdrop_get_form('githubapi_sso_link', $account);
  }
  $account->content['githubapi_sso'] = $githubapi_sso_status;
}

/**
 * Display link to github button.
 */
function githubapi_sso_link($form, &$form_state, $account) {
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Connect GitHub account'),
  );
  return $form;
}

/**
 * Display unlink to github button.
 */
function githubapi_sso_unlink($form, &$form_state, $githubapi_sso) {
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Disconnect GitHub account'),
  );
  return $form;
}

/**
 * Menu callback; Process an Github authentication.
 */
function githubapi_sso_get_access_token() {

  if (isset($_GET['code'])) {
    $config = config('githubapi.settings');

    $client_id = settings_get('githubapi_client_id');
    if(empty($client_id)){
      $client_id = $config->get('client_id');
    }
    
    $client_secret = settings_get('githubapi_client_secret');
    if(empty($client_secret)){
      $client_secret = $config->get('client_secret');
    }
  
    $params = array();
    $params['client_id'] = $client_id;
    $params['client_secret'] = $client_secret;
    $params['code'] = filter_xss($_GET['code']);

    $query = http_build_query($params);
    $response = file_get_contents(GITHUB_URI . '/login/oauth/access_token?' . $query);

    parse_str($response, $result);

    if (isset($result['access_token'])) {
      $token = $result['access_token'];
      $config->set('token', $token);
      $config->save();
      backdrop_set_message(t('We connected to GitHub now .'));
      backdrop_goto('admin/config/system/githubapi/settings');
    }
  }
  // If we didn't get a token or code, connection to Github failed.
  backdrop_set_message(t('Failed connecting to GitHub.'), 'error');
  backdrop_goto('admin/config/system/githubapi/settings');
}

/**
 * Get the user info provided by github.
 *
 * @param $token The token for the github user
 */
function githubapi_sso_get_user_info($token) {

  // Collects the User information from GitHub.
  $options = array(
    'method' => 'GET',
    'timeout' => 7200,
    'headers' => array(
      'User-Agent' => GITHUB_API_USER_AGENT,
    ),
  );
  $request = backdrop_http_reques(GITHUB_API_URI . '/user?access_token=' . $token, $options);

  $github_user = FALSE;
  if ($request->code == 200) {
    $github_user = drupal_json_decode($request->data);
  
    if (empty($github_user['email'])) {
      $github_user_emails = githubapi_sso_get_user_emails($token);
      $first_email = reset($github_user_emails);
      $github_user['email'] = $first_email['email'];
      $github_user['emails'] = $github_user_emails;
    }
  }
  return $github_user;
}

/**
 * Get the private email addresses from the user.
 *
 * @param $token The token for the github user
 */
function githubapi_sso_get_user_emails($token) {
  // Collects the User information from GitHub.
  $options = array(
    'method' => 'GET',
    'timeout' => 7200,
    'headers' => array(
      'User-Agent' => GITHUB_API_USER_AGENT,
    ),
  );
  $request = backdrop_http_reques(GITHUB_API_URI . '/user/emails?access_token=' . $token, $options);

  $github_user_emails = FALSE;
  if ($request->code == 200) {
    $github_user_emails = drupal_json_decode($request->data);
  }
  return $github_user_emails;
}
